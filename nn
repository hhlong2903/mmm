from ._anvil_designer import Form1Template
from anvil import *
import anvil.server


class Form1(Form1Template):
    def __init__(self, **properties):
        # Set Form properties and Data Bindings.
        self.init_components(**properties)

        # Gán hàm xử lý cho button sắp xếp
        self.button_sort.set_event_handler("click", self.handle_sort_button_click)

    # Hàm xử lý khi click vào button sắp xếp
    def handle_sort_button_click(self, **event_args):
        # Lấy dãy số nguyên từ textbox nhập
        numbers = [int(x.strip()) for x in self.textbox_input.text.split(',') if x.strip()]
        
        # Kiểm tra xem người dùng đã nhập số hay chưa
        if len(numbers) == 0:
            self.textbox_result.text = "Vui lòng nhập dãy số nguyên cách nhau bằng dấu phẩy."
            return
        
        # Lấy loại thuật toán sắp xếp được chọn từ dropdown
        sort_type = self.dropdown_algorithm.selected_value
        
        # Sắp xếp dãy số theo thuật toán được chọn
        if sort_type == "Insertion Sort":
            sorted_numbers = self.insertion_sort(numbers)
        elif sort_type == "Selection Sort":
            sorted_numbers = self.selection_sort(numbers)
        elif sort_type == "Bubble Sort":
            sorted_numbers = self.bubble_sort(numbers)
        elif sort_type == "Merge Sort":
            sorted_numbers = self.merge_sort(numbers)
        else:
            self.textbox_result.text = "Vui lòng chọn thuật toán sắp xếp."
            return
        
        # Hiển thị dãy số đã sắp xếp vào textbox kết quả
        self.textbox_result.text = ", ".join(str(num) for num in sorted_numbers)
        
    # Hàm sắp xếp dãy số bằng Insertion Sort
    def insertion_sort(self, arr):
        n = len(arr)
        for i in range(1, n):
            key = arr[i]
            j = i-1
            while j >=0 and key < arr[j] :
                    arr[j+1] = arr[j]
                    j -= 1
            arr[j+1] = key
        return arr
    
    # Hàm sắp xếp dãy số bằng Selection Sort
    def selection_sort(self, arr):
        for i in range(len(arr)):
            min_idx = i
            for j in range(i+1, len(arr)):
                if arr[j] < arr[min_idx]:
                    min_idx = j
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
        return arr
    
    # Hàm sắp xếp dãy số bằng Bubble Sort
    def bubble_sort(self, arr):
        n = len(arr)
        for i in range(n):
            for j in range(0, n-i-1):
                if arr[j] > arr[j+1]:
                    arr[j], arr[j+1] = arr[j+1], arr[j]
        return arr
    
    # Hàm sắp xếp dãy số bằng Merge Sort
    def merge_sort(self, arr):
        if len(arr) > 1:
            mid = len(arr)//2
            L = arr[:mid]
            R = arr[mid:]

            self.merge_sort(L)
            self.merge_sort(R)

            i = j = k = 0

            while i < len(L) and j < len(R):
                if L[i] < R[j]:
                    arr[k] = L[i]
                    i += 1
                else:
                    arr[k] = R[j]
                    j += 1
                k += 1

            while i < len(L):
                arr[k] = L[i]
                i += 1
                k += 1

            while j < len(R):
                arr[k] = R[j]
                j += 1
                k += 1
        return arr
